// Generated by gencpp from file multipoint_navigation_receiver/obstacle_srvRequest.msg
// DO NOT EDIT!


#ifndef MULTIPOINT_NAVIGATION_RECEIVER_MESSAGE_OBSTACLE_SRVREQUEST_H
#define MULTIPOINT_NAVIGATION_RECEIVER_MESSAGE_OBSTACLE_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multipoint_navigation_receiver
{
template <class ContainerAllocator>
struct obstacle_srvRequest_
{
  typedef obstacle_srvRequest_<ContainerAllocator> Type;

  obstacle_srvRequest_()
    : positionx(0.0)
    , positiony(0.0)  {
    }
  obstacle_srvRequest_(const ContainerAllocator& _alloc)
    : positionx(0.0)
    , positiony(0.0)  {
  (void)_alloc;
    }



   typedef float _positionx_type;
  _positionx_type positionx;

   typedef float _positiony_type;
  _positiony_type positiony;





  typedef boost::shared_ptr< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_srvRequest_

typedef ::multipoint_navigation_receiver::obstacle_srvRequest_<std::allocator<void> > obstacle_srvRequest;

typedef boost::shared_ptr< ::multipoint_navigation_receiver::obstacle_srvRequest > obstacle_srvRequestPtr;
typedef boost::shared_ptr< ::multipoint_navigation_receiver::obstacle_srvRequest const> obstacle_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator1> & lhs, const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.positionx == rhs.positionx &&
    lhs.positiony == rhs.positiony;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator1> & lhs, const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multipoint_navigation_receiver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddaa0386aacc9ac3585da309c04e9cdf";
  }

  static const char* value(const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddaa0386aacc9ac3ULL;
  static const uint64_t static_value2 = 0x585da309c04e9cdfULL;
};

template<class ContainerAllocator>
struct DataType< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multipoint_navigation_receiver/obstacle_srvRequest";
  }

  static const char* value(const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 positionx\n"
"float32 positiony\n"
;
  }

  static const char* value(const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positionx);
      stream.next(m.positiony);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multipoint_navigation_receiver::obstacle_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "positionx: ";
    Printer<float>::stream(s, indent + "  ", v.positionx);
    s << indent << "positiony: ";
    Printer<float>::stream(s, indent + "  ", v.positiony);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIPOINT_NAVIGATION_RECEIVER_MESSAGE_OBSTACLE_SRVREQUEST_H
